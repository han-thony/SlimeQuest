<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (audio_is_playing(snd_forest_healed)) {
    audio_stop_sound(snd_forest_healed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if land has healed

var puzzle_check = true;
for (var i = 0; i &lt; instance_number(obj_puzzle); i++) {
    var puzzle = instance_find(obj_puzzle, i);
    puzzle_check = puzzle_check &amp;&amp; puzzle.complete;
}

if (!instance_exists(obj_enemy_slime) &amp;&amp; !instance_exists(obj_slime_boss) &amp;&amp; puzzle_check) or (keyboard_check_pressed(ord('T'))) {
    instance_create(0, 0, obj_screen_flash);
    background_index[0] = bg_grass_healed;
    var door = instance_find(obj_door, 0);
    if (door != noone) {
        door.open = true;
    }
    with (obj_sign) {
        text[0] = "This land has been healed.";
        text[1] = "Thank you traveller.";
    }
    
    with (obj_villager_male) {
        text = noone;
        text[0] = "Thank you traveller!";
        text[1] = "Come meet in my village.";
        text[2] = "I have something for you.";
    }
    
    var color = 0;
    for (var j = 0; j &lt; room_height / 32; j++) {
        for (var i = 0; i &lt; room_width / 32; i++) {
            switch (color) {
                case 0:
                    instance_create(64 + (i * 32) + random_range(-16, 16), 64 + (j * 32) + random_range(-16, 16), obj_flower_red);
                    break;
                case 1:
                    instance_create(64 + (i * 32) + random_range(-16, 16), 64 + (j * 32) + random_range(-16, 16), obj_flower_blue);
                    break;
                case 2:
                    instance_create(64 + (i * 32) + random_range(-16, 16), 64 + (j * 32) + random_range(-16, 16), obj_flower_yellow);
                    break;
            }
            
            color = irandom_range(0, 2);
        }
    }
    
    audio_play_sound(snd_forest_healed, 0, true);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
